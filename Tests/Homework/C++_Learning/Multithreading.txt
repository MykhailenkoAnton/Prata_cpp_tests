многопоточность = свойство, например в ОС, состоящее в том, что процесс, порожденный в ОС
может состоять из нескольких потоков
У нас есть главный поток который начинается в мейне, там можно создать еще потоки(в зависмости от 
апаратной части = 1 ядро = 1 поток) и распаралелить задачи, к примеру если требуются сложные вычесления
занимающие время основого потока

join
Когда вызывается thread::join(), вызывающий поток блокируется до тех пор,
пока поток выполнения не завершится.
В принципе, это один из механизмов, который можно использовать, чтобы знать, когда поток завершен. 
Когда thread::join() возвращается, поток выполнения ОС завершен, и объект thread C++ может быть уничтожен.


detach

thread::detach(), поток выполнения "отсоединен" от объекта thread и больше не представлен объектом 
thread - это две независимые вещи. Объект thread C++ может быть уничтожен,
а поток выполнения ОС может продолжаться. Если программа должна знать, когда эта последовательность 
выполнения завершена, необходимо использовать другой механизм. 
join() больше нельзя вызывать в этом thread объекте, поскольку он больше не связан с потоком выполнения.

mutex
Мьютекс (англ. mutex, от mutual exclusion — «взаимное исключение») — 
это базовый механизм синхронизации. Он предназначен для организации взаимоисключающего доступа к 
общим данным для нескольких потоков с использованием барьеров памяти
(для простоты можно считать мьютекс дверью, ведущей к общим данным).
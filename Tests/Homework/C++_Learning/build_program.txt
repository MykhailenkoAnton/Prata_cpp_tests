этапы сборки:

1) ПРЕПРОЦЕССИНГ
Препроцессор — это макро процессор, который преобразовывает вашу программу для дальнейшего компилирования. 
На данной стадии происходит происходит работа с препроцессорными директивами. 
Например, препроцессор добавляет хэдеры в код (#include), убирает комментирования, 
заменяет макросы (#define) их значениями, выбирает нужные куски кода в соответствии с условиями 
#if, #ifdef и #ifndef.


2) КОМПИЛЯЦИЯ
На данном шаге g++ выполняет свою главную задачу — компилирует, 
то есть преобразует полученный на прошлом шаге код без директив в ассемблерный код. 
Это промежуточный шаг между высокоуровневым языком и машинным (бинарным) кодом.

3) АССЕМБЛИРОВАНИЕ
Так как x86 процессоры исполняют команды на бинарном коде, 
необходимо перевести ассемблерный код в машинный с помощью ассемблера.
Ассемблер преобразовывает ассемблерный код в машинный код, сохраняя его в объектном файле.
Объектный файл — это созданный ассемблером промежуточный файл, хранящий кусок машинного кода. 
Этот кусок машинного кода, который еще не был связан 
вместе с другими кусками машинного кода в конечную выполняемую программу, называется объектным кодом.
Далее возможно сохранение данного объектного кода в статические библиотеки для того, 
чтобы не компилировать данный код снова.

4) КОМПОНОВКА (ЛИНКОВКА)
Компоновщик (линкер) связывает все объектные файлы и статические библиотеки в единый исполняемый файл, 
который мы и сможем запустить в дальнейшем.
Для того, чтобы понять как происходит связка, следует рассказать о таблице символов.





внутреннее и внешнее связывание

внешнее связывание имеют те сущности, к которым можно обратиться в единице трансляции, 
отличной от той, где они определены.(extern к примеру, можно также определение функции(прототип))

Внутренее связывание отличается от внешнего тем, 
что к сущности имеющей внутренее связывание нельзя обратиться из единицы трансляции, 
отличной от той, где она определена. (static к примеру или namespace)
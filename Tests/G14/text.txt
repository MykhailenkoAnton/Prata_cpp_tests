int fib(int n, int cache[]);
int fib_wrap(int n);
int fact(int n);
int main()
{
    std::cout << fib_wrap(6) << std::endl;
    std::cout << fact(6) << std::endl;
    return 0;
}

int fib(int n, int cache[])
{
    if(n == 0) return 0;
    if (n == 1) return 1;
    if (cache[n] == 0)
    {
        int a = fib(n-2, cache);
        int b = fib(n-1, cache);
        cache[n] = a + b;
    }
    return cache[n];
}
int fib_wrap(int n)
{
    int * cache = new int[n + 1];
    return fib(n, cache);
}

int fact(int n)
{
    if (n == 0 || n == 1) return 1;
    return fact(n - 1) * n;
}


//fibonacci
int fib(int n);
int main()
{
    std::cout << fib(6) << std::endl;
    return 0;
}
int fib(int n)
{
    if (n == 0) return 0;
    if (n == 1) return 1;
    int * cache = new int[n + 1];
    cache[0] = 0;
    cache[1] = 1;
    for (int i = 2; i <= n; i++)
    {
        cache[i] = cache[i-2] + cache[i-1];
    }
    return cache[n];
}